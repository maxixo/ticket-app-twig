<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Ticket Management - TicketFlow</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-gray-50">

  <!-- Navbar -->
  <nav class="bg-white shadow-sm">
    <div class="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
      <h1 class="text-2xl font-bold text-blue-600">TicketFlow</h1>
      <div class="flex gap-4">
        <a href="/dashboard" class="text-gray-600 hover:text-gray-800">Dashboard</a>
        <a href="/auth/logout" class="text-red-600 hover:text-red-700 font-semibold">Logout</a>
      </div>
    </div>
  </nav>

  <!-- Main Container -->
  <div class="max-w-7xl mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h2 class="text-3xl font-bold text-gray-800">Ticket Management</h2>
      <button id="openFormBtn" class="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition">
        + New Ticket
      </button>
    </div>

    <!-- Ticket Form -->
    <div id="ticketForm" class="hidden bg-white p-6 rounded-xl shadow-md mb-8">
      <h3 id="formTitle" class="text-xl font-bold mb-4">Create Ticket</h3>
      <div class="space-y-4">

        <!-- Title -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
          <input id="titleInput" type="text" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" />
          <p id="titleError" class="hidden text-red-500 text-sm mt-1"></p>
        </div>

        <!-- Description -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Description *</label>
          <textarea id="descriptionInput" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" rows="3"></textarea>
          <p id="descriptionError" class="hidden text-red-500 text-sm mt-1"></p>
        </div>

        <!-- Status & Priority -->
        <div class="grid md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Status *</label>
            <select id="statusInput" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
              <option value="">Select Status</option>
              <option value="open">Open</option>
              <option value="in_progress">In Progress</option>
              <option value="closed">Closed</option>
            </select>
            <p id="statusError" class="hidden text-red-500 text-sm mt-1"></p>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Priority *</label>
            <select id="priorityInput" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
              <option value="">Select Priority</option>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
            <p id="priorityError" class="hidden text-red-500 text-sm mt-1"></p>
          </div>
        </div>

        <div class="flex gap-4">
          <button id="saveTicketBtn" class="bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-700 transition">Save</button>
          <button id="cancelBtn" class="bg-gray-300 text-gray-700 px-6 py-2 rounded-lg font-semibold hover:bg-gray-400 transition">Cancel</button>
        </div>
      </div>
    </div>

    <!-- Ticket List -->
    <div id="ticketList" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6"></div>

    <!-- Empty State -->
    <div id="emptyState" class="hidden text-center py-12">
      <p class="text-gray-500 text-lg">No tickets yet. Create your first ticket!</p>
    </div>
  </div>

  <script>
    const openFormBtn = document.getElementById('openFormBtn');
    const form = document.getElementById('ticketForm');
    const formTitle = document.getElementById('formTitle');
    const titleInput = document.getElementById('titleInput');
    const descriptionInput = document.getElementById('descriptionInput');
    const statusInput = document.getElementById('statusInput');
    const priorityInput = document.getElementById('priorityInput');
    const ticketList = document.getElementById('ticketList');
    const emptyState = document.getElementById('emptyState');
    const cancelBtn = document.getElementById('cancelBtn');
    const saveBtn = document.getElementById('saveTicketBtn');

    const titleError = document.getElementById('titleError');
    const descriptionError = document.getElementById('descriptionError');
    const statusError = document.getElementById('statusError');
    const priorityError = document.getElementById('priorityError');

    let tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    let editingId = null;

    const statusColors = {
      open: 'bg-green-100 text-green-800',
      in_progress: 'bg-yellow-100 text-yellow-800',
      closed: 'bg-gray-100 text-gray-800'
    };

    // âœ… Validation function (character-based)
    function validateForm() {
      let isValid = true;
      const title = titleInput.value.trim();
      const description = descriptionInput.value.trim();
      const status = statusInput.value;
      const priority = priorityInput.value;

      // Title validation
      if (!title) {
        titleError.textContent = "Title is required.";
        titleError.classList.remove('hidden');
        isValid = false;
      } else if (title.length < 3) {
        titleError.textContent = "Title must be at least 3 letters long.";
        titleError.classList.remove('hidden');
        isValid = false;
      } else {
        titleError.classList.add('hidden');
      }

      // Description validation
      if (!description) {
        descriptionError.textContent = "Description is required.";
        descriptionError.classList.remove('hidden');
        isValid = false;
      } else if (description.length < 10) {
        descriptionError.textContent = "Description must be at least 10 letters long.";
        descriptionError.classList.remove('hidden');
        isValid = false;
      } else {
        descriptionError.classList.add('hidden');
      }

      // Status validation
      if (!status) {
        statusError.textContent = "Please select a status.";
        statusError.classList.remove('hidden');
        isValid = false;
      } else {
        statusError.classList.add('hidden');
      }

      // Priority validation
      if (!priority) {
        priorityError.textContent = "Please choose a priority.";
        priorityError.classList.remove('hidden');
        isValid = false;
      } else {
        priorityError.classList.add('hidden');
      }

      return isValid;
    }

    function renderTickets() {
      ticketList.innerHTML = '';
      if (tickets.length === 0) {
        emptyState.classList.remove('hidden');
        return;
      }
      emptyState.classList.add('hidden');

      tickets.forEach(ticket => {
        const div = document.createElement('div');
        div.className = 'bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition';
        div.innerHTML = `
          <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-semibold text-gray-800">${ticket.title}</h3>
            <span class="px-3 py-1 rounded-full text-xs font-semibold ${statusColors[ticket.status] || ''}">
              ${ticket.status.replace('_', ' ')}
            </span>
          </div>
          <p class="text-gray-600 text-sm mb-4">${ticket.description}</p>
          <div class="flex justify-between items-center">
            <span class="text-xs text-gray-500">Priority: ${ticket.priority}</span>
            <div class="flex gap-2">
              <button onclick="editTicket(${ticket.id})" class="text-blue-600 hover:text-blue-700">Edit</button>
              <button onclick="deleteTicket(${ticket.id})" class="text-red-600 hover:text-red-700">Delete</button>
            </div>
          </div>
        `;
        ticketList.appendChild(div);
      });
    }

    function openForm(editMode = false) {
      form.classList.remove('hidden');
      openFormBtn.classList.add('hidden');
      formTitle.textContent = editMode ? 'Edit Ticket' : 'Create Ticket';
    }

    function closeForm() {
      form.classList.add('hidden');
      openFormBtn.classList.remove('hidden');
      titleInput.value = '';
      descriptionInput.value = '';
      statusInput.value = '';
      priorityInput.value = '';
      editingId = null;
      [titleError, descriptionError, statusError, priorityError].forEach(e => e.classList.add('hidden'));
    }

    function saveTicket() {
      if (!validateForm()) return;

      const newTicket = {
        id: editingId || Date.now(),
        title: titleInput.value.trim(),
        description: descriptionInput.value.trim(),
        status: statusInput.value,
        priority: priorityInput.value
      };

      if (editingId) {
        tickets = tickets.map(t => t.id === editingId ? newTicket : t);
      } else {
        tickets.push(newTicket);
      }

      localStorage.setItem('tickets', JSON.stringify(tickets));
      renderTickets();
      closeForm();
    }

    window.editTicket = function(id) {
      const ticket = tickets.find(t => t.id === id);
      if (!ticket) return;

      titleInput.value = ticket.title;
      descriptionInput.value = ticket.description;
      statusInput.value = ticket.status;
      priorityInput.value = ticket.priority;
      editingId = id;

      openForm(true);
    };

    window.deleteTicket = function(id) {
      if (!confirm('Are you sure you want to delete this ticket? This cannot be undone.')) return;
      tickets = tickets.filter(t => t.id !== id);
      localStorage.setItem('tickets', JSON.stringify(tickets));
      renderTickets();
    };

    // Event handlers
    openFormBtn.addEventListener('click', () => openForm(false));
    cancelBtn.addEventListener('click', closeForm);
    saveBtn.addEventListener('click', saveTicket);

    renderTickets();
  </script>
</body>
</html>